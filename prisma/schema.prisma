// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

// Auth.js Models
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Subscription {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  status        String    @default("inactive") // active, inactive, canceled
  plan          String    @default("free") // free, premium
  startDate     DateTime
  endDate       DateTime?
  stripeCustomerId String?
  stripeSubscriptionId String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  history       SubscriptionHistory[]
}

model SubscriptionHistory {
  id              String    @id @default(cuid())
  subscriptionId  String
  subscription    Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  status          String    // active, inactive, canceled
  plan            String    // free, premium
  startDate       DateTime
  endDate         DateTime?
  createdAt       DateTime  @default(now())
}

model User {
  id            String          @id @default(cuid())
  name          String?
  password      String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  resumes       Resume[]
  applications  Application[]
  jobs          JobUser[]
  subscription  Subscription?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Profile {
  id                String   @id @default(cuid())
  userId            String   @unique
  legalFirstName    String
  legalLastName     String
  preferredFirstName String
  preferredLastName  String
  hasPreferredName  Boolean  @default(false)
  title             String?
  bio               String?  @db.Text
  address           String?
  city              String?
  state             String?
  zipCode           String?
  country           String?
  location          String?
  phone             String?
  website           String?
  linkedin          String?
  github            String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills            Skill[]
  experience        Experience[]
  education         Education[]
  certifications    Certification[]
  projects          Project[]
}

model Skill {
  id        String   @id @default(cuid())
  name      String
  rating    Int?
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, profileId])
}

model Experience {
  id          String    @id @default(cuid())
  profileId   String
  profile     Profile   @relation(fields: [profileId], references: [id])
  company     String
  position    String
  startDate   DateTime
  endDate     DateTime?
  description String? @db.Text
  isCurrent   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Education {
  id          String    @id @default(cuid())
  profileId   String
  profile     Profile   @relation(fields: [profileId], references: [id])
  institution String
  degree      String
  field       String
  startDate   DateTime
  endDate     DateTime?
  description String? @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ResumeWork {
  id          String    @id @default(cuid())
  resumeId    String
  resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade, name: "ResumeToWorkExperience")
  company     String
  position    String
  startDate   DateTime
  endDate     DateTime?
  description String? @db.Text
  isCurrent   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ResumeEducation {
  id          String    @id @default(cuid())
  resumeId    String
  resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade, name: "ResumeToEducationDetail")
  institution String
  degree      String
  field       String
  startDate   DateTime
  endDate     DateTime?
  description String? @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ResumeSkill {
  id        String   @id @default(cuid())
  resumeId  String
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade, name: "ResumeToSkillDetail")
  name      String
  rating    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResumeCertification {
  id            String    @id @default(cuid())
  resumeId      String
  resume        Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade, name: "ResumeToCertificationDetail")
  name          String
  issuer        String
  issueDate     DateTime
  expiryDate    DateTime?
  credentialId  String?
  credentialUrl String?
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model ResumeSummary {
  id        String   @id @default(cuid())
  resumeId  String
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade, name: "ResumeToSummary")
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resume {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  title       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  applications ApplicationResume[]
  workExperiences ResumeWork[] @relation("ResumeToWorkExperience")
  educationDetails ResumeEducation[] @relation("ResumeToEducationDetail")
  skillDetails ResumeSkill[] @relation("ResumeToSkillDetail")
  certificationDetails ResumeCertification[] @relation("ResumeToCertificationDetail")
  summaries ResumeSummary[] @relation("ResumeToSummary")
}

model Job {
  id              String    @id @default(cuid())
  title           String?
  companyName     String?
  description     String?    @db.Text
  requirements    String[]
  url             String?    @unique
  salaryMin       Int?
  salaryMax       Int?
  location        String?
  postingDate     DateTime?
  applicationDeadline DateTime?
  applicationInstructions String? @db.Text
  applicationWebsite String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  applications    Application[]
  users           JobUser[]
}

model JobUser {
  id            String    @id @default(cuid())
  jobId         String
  job           Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([jobId, userId])
}

model Application {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobId           String
  job             Job       @relation(fields: [jobId], references: [id])
  status          String    @default("pending") // pending, applied, rejected, accepted
  notes           String?   @db.Text
  applicationDate DateTime?
  statusHistory   ApplicationStatusHistory[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  resumes         ApplicationResume[]

  @@index([userId])
}

model ApplicationResume {
  id            String      @id @default(cuid())
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  resumeId      String
  resume        Resume      @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([applicationId, resumeId])
}

model ApplicationStatusHistory {
  id              String    @id @default(cuid())
  applicationId   String
  application     Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  status          String
  notes           String?
  createdAt       DateTime  @default(now())
}

model Certification {
  id            String    @id @default(cuid())
  profileId     String
  profile       Profile   @relation(fields: [profileId], references: [id])
  name          String
  issuer        String
  issueDate     DateTime
  expiryDate    DateTime?
  credentialId  String?
  credentialUrl String?
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Project {
  id              String    @id @default(cuid())
  profileId       String
  profile         Profile   @relation(fields: [profileId], references: [id])
  name            String
  description     String
  startDate       DateTime
  endDate         DateTime?
  technologies    String[]
  projectUrl      String?
  githubUrl       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}